//饿汉模式
class Singleton {
    private static Singleton instance = new Singleton(); 
    private Singleton() {}
    public static Singleton getInstance() { 
        return instance;
    }
}
//懒汉模式
class Singleton {
    private static Singleton instance = null; 
    private Singleton() {}
    public static Singleton getInstance() { 
        if (instance == null) {
        instance = new Singleton();
        }
        return instance;
    }
}
//双重校验锁
class Singleton {
    private static volatile Singleton singleton = null;
    private Singleton() {}
    public static Singleton getInstance() {
        if(singleton == null) {
            synchronized(Singleton.class) {
                if(singleton == null) {
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
    }
}
